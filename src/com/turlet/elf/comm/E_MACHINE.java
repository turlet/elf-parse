package com.turlet.elf.comm;

import java.util.HashMap;
import java.util.Map;

/**
 * Create by Silen((myemail)) on 2019/8/22 14:40
 * <pre>
 *     e_machine
 * This member's value specifies the required architecture for an individual file.
 *<a href="https://android.googlesource.com/platform/bionic/+/master/libc/include/elf.h" al>参考连接</a>
 * </pre>
 */
public class E_MACHINE {

    public static final int EM_NONE = 0;
    public static final int EM_M32 = 1;
    public static final int EM_SPARC = 2;
    public static final int EM_386 = 3;
    public static final int EM_68K = 4;
    public static final int EM_88K = 5;
    public static final int EM_486 = 6;
    public static final int EM_860 = 7;
    public static final int EM_MIPS = 8;
    public static final int EM_S370 = 9;
    //public static final int EM_MIPS_RS4_BE = 10;
    public static final int EM_MIPS_RS3_LE = 10;
    public static final int EM_RESERVED11 = 11;
    public static final int EM_RESERVED12 = 12;
    public static final int EM_RESERVED13 = 13;
    public static final int EM_RESERVED14 = 14;
    public static final int EM_PARISC = 15;
    public static final int EM_RESERVED16 = 16;
    public static final int EM_VPP550 = 17;
    public static final int EM_SPARC32PLUS = 18;
    public static final int EM_960 = 19;
    public static final int EM_PPC = 20;
    public static final int EM_PPC64 = 21;
    public static final int EM_S390 = 22;
    public static final int EM_SPU = 23;
    //reserved	24-35	Reserved for future use
    public static final int EM_V800 = 36;
    public static final int EM_FR20 = 37;
    public static final int EM_RH32 = 38;
    //public static final int EM_MCORE = 39;
    public static final int EM_RCE = 39;
    public static final int EM_ARM = 40;
    public static final int EM_OLD_ALPHA = 41;
    public static final int EM_SH = 42;
    public static final int EM_SPARCV9 = 43;
    public static final int EM_TRICORE = 44;
    public static final int EM_ARC = 45;
    public static final int EM_H8_300 = 46;
    public static final int EM_H8_300H = 47;
    public static final int EM_H8S = 48;
    public static final int EM_H8_500 = 49;
    public static final int EM_IA_64 = 50;
    public static final int EM_MIPS_X = 51;
    public static final int EM_COLDFIRE = 52;
    public static final int EM_68HC12 = 53;
    public static final int EM_MMA = 54;
    public static final int EM_PCP = 55;
    public static final int EM_NCPU = 56;
    public static final int EM_NDR1 = 57;
    public static final int EM_STARCORE = 58;
    public static final int EM_ME16 = 59;
    public static final int EM_ST100 = 60;
    public static final int EM_TINYJ = 61;
    public static final int EM_X86_64 = 62;
    public static final int EM_PDSP = 63;
    public static final int EM_PDP10 = 64;
    public static final int EM_PDP11 = 65;
    public static final int EM_FX66 = 66;
    public static final int EM_ST9PLUS = 67;
    public static final int EM_ST7 = 68;
    public static final int EM_68HC16 = 69;
    public static final int EM_68HC11 = 70;
    public static final int EM_68HC08 = 71;
    public static final int EM_68HC05 = 72;
    public static final int EM_SVX = 73;
    public static final int EM_ST19 = 74;
    public static final int EM_VAX = 75;
    public static final int EM_CRIS = 76;
    public static final int EM_JAVELIN = 77;
    public static final int EM_FIREPATH = 78;
    public static final int EM_ZSP = 79;
    public static final int EM_MMIX = 80;
    public static final int EM_HUANY = 81;
    public static final int EM_PRISM = 82;
    public static final int EM_AVR = 83;
    public static final int EM_FR30 = 84;
    public static final int EM_D10V = 85;
    public static final int EM_D30V = 86;
    public static final int EM_V850 = 87;
    public static final int EM_M32R = 88;
    public static final int EM_MN10300 = 89;
    public static final int EM_MN10200 = 90;
    public static final int EM_PJ = 91;
    public static final int EM_OPENRISC = 92;
    public static final int EM_ARC_COMPACT = 93;
    public static final int EM_XTENSA = 94;
    public static final int EM_VIDEOCORE = 95;
    public static final int EM_TMM_GPP = 96;
    public static final int EM_NS32K = 97;
    public static final int EM_TPC = 98;
    public static final int EM_SNP1K = 99;
    public static final int EM_ST200 = 100;
    public static final int EM_IP2K = 101;
    public static final int EM_MAX = 102;
    public static final int EM_CR = 103;
    public static final int EM_F2MC16 = 104;
    public static final int EM_MSP430 = 105;
    public static final int EM_BLACKFIN = 106;
    public static final int EM_SE_C33 = 107;
    public static final int EM_SEP = 108;
    public static final int EM_ARCA = 109;
    public static final int EM_UNICORE = 110;
    public static final int EM_EXCESS = 111;
    public static final int EM_DXP = 112;
    public static final int EM_ALTERA_NIOS2 = 113;
    public static final int EM_CRX = 114;
    public static final int EM_XGATE = 115;
    public static final int EM_C166 = 116;
    public static final int EM_M16C = 117;
    public static final int EM_DSPIC30F = 118;
    public static final int EM_CE = 119;
    public static final int EM_M32C = 120;
    public static final int EM_TSK3000 = 131;
    public static final int EM_RS08 = 132;
    public static final int EM_SHARC = 133;
    public static final int EM_ECOG2 = 134;
    public static final int EM_SCORE7 = 135;
    public static final int EM_DSP24 = 136;
    public static final int EM_VIDEOCORE3 = 137;
    public static final int EM_LATTICEMICO32 = 138;
    public static final int EM_SE_C17 = 139;
    public static final int EM_TI_C6000 = 140;
    public static final int EM_TI_C2000 = 141;
    public static final int EM_TI_C5500 = 142;
    public static final int EM_TI_ARP32 = 143;
    public static final int EM_TI_PRU = 144;
    public static final int EM_MMDSP_PLUS = 160;
    public static final int EM_CYPRESS_M8C = 161;
    public static final int EM_R32C = 162;
    public static final int EM_TRIMEDIA = 163;
    public static final int EM_QDSP6 = 164;
    public static final int EM_8051 = 165;
    public static final int EM_STXP7X = 166;
    public static final int EM_NDS32 = 167;
    public static final int EM_ECOG1 = 168;
    public static final int EM_ECOG1X = 168;
    public static final int EM_MAXQ30 = 169;
    public static final int EM_XIMO16 = 170;
    public static final int EM_MANIK = 171;
    public static final int EM_CRAYNV2 = 172;
    public static final int EM_RX = 173;
    public static final int EM_METAG = 174;
    public static final int EM_MCST_ELBRUS = 175;
    public static final int EM_ECOG16 = 176;
    public static final int EM_CR16 = 177;
    public static final int EM_ETPU = 178;
    public static final int EM_SLE9X = 179;
    public static final int EM_L10M = 180;
    public static final int EM_K10M = 181;
    public static final int EM_AARCH64 = 183;
    public static final int EM_AVR32 = 185;
    public static final int EM_STM8 = 186;
    public static final int EM_TILE64 = 187;
    public static final int EM_TILEPRO = 188;
    public static final int EM_MICROBLAZE = 189;
    public static final int EM_CUDA = 190;
    public static final int EM_TILEGX = 191;
    public static final int EM_CLOUDSHIELD = 192;
    public static final int EM_COREA_1ST = 193;
    public static final int EM_COREA_2ND = 194;
    public static final int EM_ARC_COMPACT2 = 195;
    public static final int EM_OPEN8 = 196;
    public static final int EM_RL78 = 197;
    public static final int EM_VIDEOCORE5 = 198;
    public static final int EM_78KOR = 199;
    public static final int EM_56800EX = 200;
    public static final int EM_BA1 = 201;
    public static final int EM_BA2 = 202;
    public static final int EM_XCORE = 203;
    public static final int EM_MCHP_PIC = 204;
    public static final int EM_INTEL205 = 205;
    public static final int EM_INTEL206 = 206;
    public static final int EM_INTEL207 = 207;
    public static final int EM_INTEL208 = 208;
    public static final int EM_INTEL209 = 209;
    public static final int EM_KM32 = 210;
    public static final int EM_KMX32 = 211;
    public static final int EM_KMX16 = 212;
    public static final int EM_KMX8 = 213;
    public static final int EM_KVARC = 214;
    public static final int EM_CDP = 215;
    public static final int EM_COGE = 216;
    public static final int EM_COOL = 217;
    public static final int EM_NORC = 218;
    public static final int EM_CSR_KALIMBA = 219;
    public static final int EM_Z80 = 220;
    public static final int EM_VISIUM = 221;
    public static final int EM_FT32 = 222;
    public static final int EM_MOXIE = 223;
    public static final int EM_AMDGPU = 224;
    public static final int EM_RISCV = 243;

    private static Map<Integer, String> map = new HashMap<>();

    static {
        map.put( EM_NONE,"No machine(0)");
        map.put( EM_M32,"AT&T WE 32100(1)");
        map.put( EM_SPARC,"SPARC(2)");
        map.put( EM_386,"Intel 80386(3)");
        map.put( EM_68K,"Motorola 68000(4)");
        map.put( EM_88K,"Motorola 88000(5)");
        map.put( EM_486,"Intel MCU(6)");
        map.put( EM_860,"Intel 80860(7)");
        map.put( EM_MIPS,"MIPS I Architecture(8)");
        map.put( EM_S370,"IBM System/370 Processor(9)");
        //map.put( EM_MIPS_RS4_BE,"MIPS RS3000 Little-endian(10)");
        map.put( EM_MIPS_RS3_LE,"MIPS RS3000 Little-endian(10)");
        map.put( EM_RESERVED11,"Reserved for future use(11)");
        map.put( EM_RESERVED12,"Reserved for future use(12)");
        map.put( EM_RESERVED13,"Reserved for future use(13)");
        map.put( EM_RESERVED14,"Reserved for future use(14)");
        map.put( EM_PARISC,"Hewlett-Packard PA-RISC(15)");
        map.put( EM_RESERVED16,"Reserved for future use(16)");
        map.put( EM_VPP550,"Fujitsu VPP500(17)");
        map.put( EM_SPARC32PLUS,"Enhanced instruction set SPARC(18)");
        map.put( EM_960,"Intel 80960(19)");
        map.put( EM_PPC,"PowerPC(20)");
        map.put( EM_PPC64,"64-bit PowerPC(21)");
        map.put( EM_S390,"IBM System/390 Processor(22)");
        map.put( EM_SPU,"IBM SPU/SPC(23)");
        //reserved	24-35	Reserved for future use
        map.put( EM_V800,"NEC V800(36)");
        map.put( EM_FR20,"Fujitsu FR20(37)");
        map.put( EM_RH32,"TRW RH-32(38)");
        map.put( EM_RCE,"Motorola RCE(39)");
        map.put( EM_ARM,"ARM 32-bit architecture (AARCH32)(40)");
        map.put( EM_OLD_ALPHA,"Digital Alpha(41)");
        map.put( EM_SH,"Hitachi SH(42)");
        map.put( EM_SPARCV9,"SPARC Version 9(43)");
        map.put( EM_TRICORE,"Siemens TriCore embedded processor(44)");
        map.put( EM_ARC,"Argonaut RISC Core, Argonaut Technologies Inc.(45)");
        map.put( EM_H8_300,"Hitachi H8/300(46)");
        map.put( EM_H8_300H,"Hitachi H8/300H(47)");
        map.put( EM_H8S,"Hitachi H8S(48)");
        map.put( EM_H8_500,"Hitachi H8/500(49)");
        map.put( EM_IA_64,"Intel IA-64 processor architecture(50)");
        map.put( EM_MIPS_X,"Stanford MIPS-X(51)");
        map.put( EM_COLDFIRE,"Motorola ColdFire(52)");
        map.put( EM_68HC12,"Motorola M68HC12(53)");
        map.put( EM_MMA,"Fujitsu MMA Multimedia Accelerator(54)");
        map.put( EM_PCP,"Siemens PCP(55)");
        map.put( EM_NCPU,"Sony nCPU embedded RISC processor(56)");
        map.put( EM_NDR1,"Denso NDR1 microprocessor(57)");
        map.put( EM_STARCORE,"Motorola Star*Core processor(58)");
        map.put( EM_ME16,"Toyota ME16 processor(59)");
        map.put( EM_ST100,"STMicroelectronics ST100 processor(60)");
        map.put( EM_TINYJ,"Advanced Logic Corp. TinyJ embedded processor family(61)");
        map.put( EM_X86_64,"AMD x86-64 architecture(62)");
        map.put( EM_PDSP,"Sony DSP Processor(63)");
        map.put( EM_PDP10,"Digital Equipment Corp. PDP-10(64)");
        map.put( EM_PDP11,"Digital Equipment Corp. PDP-11(65)");
        map.put( EM_FX66,"Siemens FX66 microcontroller(66)");
        map.put( EM_ST9PLUS,"STMicroelectronics ST9+ 8/16 bit microcontroller(67)");
        map.put( EM_ST7,"STMicroelectronics ST7 8-bit microcontroller(68)");
        map.put( EM_68HC16,"Motorola MC68HC16 Microcontroller(69)");
        map.put( EM_68HC11,"Motorola MC68HC11 Microcontroller(70)");
        map.put( EM_68HC08,"Motorola MC68HC08 Microcontroller(71)");
        map.put( EM_68HC05,"Motorola MC68HC05 Microcontroller(72)");
        map.put( EM_SVX,"Silicon Graphics SVx(73)");
        map.put( EM_ST19,"STMicroelectronics ST19 8-bit microcontroller(74)");
        map.put( EM_VAX,"Digital VAX(75)");
        map.put( EM_CRIS,"Axis Communications 32-bit embedded processor(76)");
        map.put( EM_JAVELIN,"Infineon Technologies 32-bit embedded processor(77)");
        map.put( EM_FIREPATH,"Element 14 64-bit DSP Processor(78)");
        map.put( EM_ZSP,"LSI Logic 16-bit DSP Processor(79)");
        map.put( EM_MMIX,"Donald Knuth's educational 64-bit processor(80)");
        map.put( EM_HUANY,"Harvard University machine-independent object files(81)");
        map.put( EM_PRISM,"SiTera Prism(82)");
        map.put( EM_AVR,"Atmel AVR 8-bit microcontroller(83)");
        map.put( EM_FR30,"Fujitsu FR30(84)");
        map.put( EM_D10V,"Mitsubishi D10V(85)");
        map.put( EM_D30V,"Mitsubishi D30V(86)");
        map.put( EM_V850,"NEC v850(87)");
        map.put( EM_M32R,"Mitsubishi M32R(88)");
        map.put( EM_MN10300,"Matsushita MN10300(89)");
        map.put( EM_MN10200,"Matsushita MN10200(90)");
        map.put( EM_PJ,"picoJava91");
        map.put( EM_OPENRISC,"OpenRISC 32-bit embedded processor(92)");
        map.put( EM_ARC_COMPACT,"ARC International ARCompact processor (old spelling/synonym: EM_ARC_A5)(93)");
        map.put( EM_XTENSA,"Tensilica Xtensa Architecture(94)");
        map.put( EM_VIDEOCORE,"Alphamosaic VideoCore processor(95)");
        map.put( EM_TMM_GPP,"Thompson Multimedia General Purpose Processor(96)");
        map.put( EM_NS32K,"National Semiconductor 32000 series(97)");
        map.put( EM_TPC,"Tenor Network TPC processor(98)");
        map.put( EM_SNP1K,"Trebia SNP 1000 processor(99)");
        map.put( EM_ST200,"STMicroelectronics (www.st.com) ST200 microcontroller(100)");
        map.put( EM_IP2K,"Ubicom IP2xxx microcontroller family(101)");
        map.put( EM_MAX,"MAX Processor(102)");
        map.put( EM_CR,"National Semiconductor CompactRISC microprocessor(103)");
        map.put( EM_F2MC16,"Fujitsu F2MC16(104)");
        map.put( EM_MSP430,"Texas Instruments embedded microcontroller msp430(105)");
        map.put( EM_BLACKFIN,"Analog Devices Blackfin (DSP) processor(106)");
        map.put( EM_SE_C33,"S1C33 Family of Seiko Epson processors(107)");
        map.put( EM_SEP,"Sharp embedded microprocessor(108)");
        map.put( EM_ARCA,"Arca RISC Microprocessor(109)");
        map.put( EM_UNICORE,"Microprocessor series from PKU-Unity Ltd. and MPRC of Peking University(110)");
        map.put( EM_EXCESS,"eXcess: 16/32/64-bit configurable embedded CPU(111)");
        map.put( EM_DXP,"Icera Semiconductor Inc. Deep Execution Processor(112)");
        map.put( EM_ALTERA_NIOS2,"Altera Nios II soft-core processor(113)");
        map.put( EM_CRX,"National Semiconductor CompactRISC CRX microprocessor(114)");
        map.put( EM_XGATE,"Motorola XGATE embedded processor(115)");
        map.put( EM_C166,"Infineon C16x/XC16x processor(116)");
        map.put( EM_M16C,"Renesas M16C series microprocessors(117)");
        map.put( EM_DSPIC30F,"Microchip Technology dsPIC30F Digital Signal Controller(118)");
        map.put( EM_CE,"Freescale Communication Engine RISC core(119)");
        map.put( EM_M32C,"Renesas M32C series microprocessors(120)");
        //reserved	121-130	Reserved for future use
        map.put( EM_TSK3000,"Altium TSK3000 core(131)");
        map.put( EM_RS08,"Freescale RS08 embedded processor(132)");
        map.put( EM_SHARC,"Analog Devices SHARC family of 32-bit DSP processors(133)");
        map.put( EM_ECOG2,"Cyan Technology eCOG2 microprocessor(134)");
        map.put( EM_SCORE7,"Sunplus S+core7 RISC processor(135)");
        map.put( EM_DSP24,"New Japan Radio (NJR) 24-bit DSP Processor(136)");
        map.put( EM_VIDEOCORE3,"Broadcom VideoCore III processor(137)");
        map.put( EM_LATTICEMICO32,"RISC processor for Lattice FPGA architecture(138)");
        map.put( EM_SE_C17,"Seiko Epson C17 family(139)");
        map.put( EM_TI_C6000,"The Texas Instruments TMS320C6000 DSP family(140)");
        map.put( EM_TI_C2000,"The Texas Instruments TMS320C6000 DSP family(141)");
        map.put( EM_TI_C5500,"The Texas Instruments TMS320C55x DSP family(142)");
        map.put( EM_TI_ARP32,"Texas Instruments Application Specific RISC Processor, 32bit fetch(143)");
        map.put( EM_TI_PRU,"Texas Instruments Programmable Realtime Unit(144)");
        //reserved	145-159	Reserved for future use
        map.put( EM_MMDSP_PLUS,"STMicroelectronics 64bit VLIW Data Signal Processor(160)");
        map.put( EM_CYPRESS_M8C,"Cypress M8C microprocessor(161)");
        map.put( EM_R32C,"Renesas R32C series microprocessors(162)");
        map.put( EM_TRIMEDIA,"NXP Semiconductors TriMedia architecture family(163)");
        map.put( EM_QDSP6,"QUALCOMM DSP6 Processor(164)");
        map.put( EM_8051,"Intel 8051 and variants(165)");
        map.put( EM_STXP7X,"STMicroelectronics STxP7x family of configurable and extensible RISC processors(166)");
        map.put( EM_NDS32,"Andes Technology compact code size embedded RISC processor family(167)");
        map.put( EM_ECOG1,"Cyan Technology eCOG1X family(168)");
        //map.put( EM_ECOG1X,"Cyan Technology eCOG1X family(168)");
        map.put( EM_MAXQ30,"Dallas Semiconductor MAXQ30 Core Micro-controllers(169)");
        map.put( EM_XIMO16,"New Japan Radio (NJR) 16-bit DSP Processor(170)");
        map.put( EM_MANIK,"M2000 Reconfigurable RISC Microprocessor(171)");
        map.put( EM_CRAYNV2,"Cray Inc. NV2 vector architecture(172)");
        map.put( EM_RX,"Renesas RX family(173)");
        map.put( EM_METAG,"Imagination Technologies META processor architecture(174)");
        map.put( EM_MCST_ELBRUS,"MCST Elbrus general purpose hardware architecture(175)");
        map.put( EM_ECOG16,"Cyan Technology eCOG16 family(176)");
        map.put( EM_CR16,"National Semiconductor CompactRISC CR16 16-bit microprocessor(177)");
        map.put( EM_ETPU,"Freescale Extended Time Processing Unit(178)");
        map.put( EM_SLE9X,"Infineon Technologies SLE9X core(179)");
        map.put( EM_L10M,"Intel L10M(180)");
        map.put( EM_K10M,"Intel K10M(181)");
        //reserved	182	Reserved for future Intel use
        map.put( EM_AARCH64,"ARM 64-bit architecture (AARCH64)(183)");
        //reserved	184	Reserved for future ARM use
        map.put( EM_AVR32,"Atmel Corporation 32-bit microprocessor family(185)");
        map.put( EM_STM8,"STMicroeletronics STM8 8-bit microcontroller(186)");
        map.put( EM_TILE64,"Tilera TILE64 multicore architecture family(187)");
        map.put( EM_TILEPRO,"Tilera TILEPro multicore architecture family(188)");
        map.put( EM_MICROBLAZE,"Xilinx MicroBlaze 32-bit RISC soft processor core(189)");
        map.put( EM_CUDA,"NVIDIA CUDA architecture(190)");
        map.put( EM_TILEGX,"Tilera TILE-Gx multicore architecture family(191)");
        map.put( EM_CLOUDSHIELD,"CloudShield architecture family(192)");
        map.put( EM_COREA_1ST,"KIPO-KAIST Core-A 1st generation processor family(193)");
        map.put( EM_COREA_2ND,"KIPO-KAIST Core-A 2nd generation processor family(194)");
        map.put( EM_ARC_COMPACT2,"Synopsys ARCompact V2(195)");
        map.put( EM_OPEN8,"Open8 8-bit RISC soft processor core(196)");
        map.put( EM_RL78,"Renesas RL78 family(197)");
        map.put( EM_VIDEOCORE5,"Broadcom VideoCore V processor(198)");
        map.put( EM_78KOR,"Renesas 78KOR family(199)");
        map.put( EM_56800EX,"Freescale 56800EX Digital Signal Controller (DSC)(200)");
        map.put( EM_BA1,"Beyond BA1 CPU architecture(201)");
        map.put( EM_BA2,"Beyond BA2 CPU architecture(202)");
        map.put( EM_XCORE,"XMOS xCORE processor family(203)");
        map.put( EM_MCHP_PIC,"Microchip 8-bit PIC(r) family(204)");
        map.put( EM_INTEL205,"Reserved by Intel(205)");
        map.put( EM_INTEL206,"Reserved by Intel(206)");
        map.put( EM_INTEL207,"Reserved by Intel(207)");
        map.put( EM_INTEL208,"Reserved by Intel(208)");
        map.put( EM_INTEL209,"Reserved by Intel(209)");
        map.put( EM_KM32,"KM211 KM32 32-bit processor(210)");
        map.put( EM_KMX32,"KM211 KMX32 32-bit processor(211)");
        map.put( EM_KMX16,"KM211 KMX16 16-bit processor(212)");
        map.put( EM_KMX8,"KM211 KMX8 8-bit processor(213)");
        map.put( EM_KVARC,"KM211 KVARC processor(214)");
        map.put( EM_CDP,"Paneve CDP architecture family(215)");
        map.put( EM_COGE,"Cognitive Smart Memory Processor(216)");
        map.put( EM_COOL,"Bluechip Systems CoolEngine(217)");
        map.put( EM_NORC,"Nanoradio Optimized RISC(218)");
        map.put( EM_CSR_KALIMBA,"CSR Kalimba architecture family(219)");
        map.put( EM_Z80,"Zilog Z80(220)");
        map.put( EM_VISIUM,"Controls and Data Services VISIUMcore processor(221)");
        map.put( EM_FT32,"FTDI Chip FT32 high performance 32-bit RISC architecture(222)");
        map.put( EM_MOXIE,"Moxie processor family(223)");
        map.put( EM_AMDGPU,"AMD GPU architecture(224)");
        //225 - 242
        map.put( EM_RISCV,"RISC-V(243)");

    }

    public static String get(Integer e_machine) {
        return map.get(e_machine);
    }
}
